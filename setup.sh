#!/bin/bash
# Setup script for nuclear-sandbox project
# This script downloads and configures all necessary non-git data elements

set -e  # Exit on error

echo "=== Nuclear Sandbox Setup Script ==="
echo

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
NC='\033[0m' # No Color

# Function to print colored output
print_status() {
    echo -e "${GREEN}[✓]${NC} $1"
}

print_warning() {
    echo -e "${YELLOW}[!]${NC} $1"
}

print_error() {
    echo -e "${RED}[✗]${NC} $1"
}

# Check if we're in the right directory
if [ ! -f "environment.yml" ]; then
    print_error "Please run this script from the nuclear-sandbox project root"
    exit 1
fi

# Step 1: Install micromamba if not present
if [ ! -f "bin/micromamba" ]; then
    print_status "Installing micromamba..."
    mkdir -p bin
    
    # Detect OS and architecture
    OS=$(uname -s)
    ARCH=$(uname -m)
    
    if [[ "$OS" == "Darwin" ]]; then
        if [[ "$ARCH" == "arm64" ]]; then
            # Apple Silicon - use x86_64 for OpenMC compatibility
            print_warning "Apple Silicon detected - installing x86_64 version for OpenMC compatibility"
            MICROMAMBA_URL="https://micro.mamba.pm/api/micromamba/osx-64/latest"
        else
            MICROMAMBA_URL="https://micro.mamba.pm/api/micromamba/osx-64/latest"
        fi
    elif [[ "$OS" == "Linux" ]]; then
        MICROMAMBA_URL="https://micro.mamba.pm/api/micromamba/linux-64/latest"
    else
        print_error "Unsupported OS: $OS"
        exit 1
    fi
    
    curl -Ls $MICROMAMBA_URL | tar -xvj -C bin/ --strip-components=1 bin/micromamba
    chmod +x bin/micromamba
    print_status "Micromamba installed"
else
    print_status "Micromamba already installed"
fi

# Step 2: Create/update conda environment
print_status "Setting up conda environment..."
if [[ "$OSTYPE" == "darwin"* ]] && [[ $(uname -m) == "arm64" ]]; then
    # Apple Silicon - create x86_64 environment
    export CONDA_SUBDIR=osx-64
    bin/micromamba create -y -n nuclear-sandbox -f environment.yml --platform osx-64
else
    bin/micromamba create -y -n nuclear-sandbox -f environment.yml
fi
print_status "Conda environment ready"

# Step 3: Download OpenMC cross-section data
if [ ! -d "openmc-data" ] || [ ! -f "openmc-data/cross_sections.xml" ]; then
    print_status "Downloading OpenMC cross-section data (this may take a while)..."
    bin/micromamba run -n nuclear-sandbox python scripts/download_xs.py
    
    # Regenerate cross_sections.xml to ensure all nuclides are indexed
    print_status "Regenerating cross_sections.xml..."
    bin/micromamba run -n nuclear-sandbox python scripts/regenerate_xs_xml.py
    
    print_status "Cross-section data downloaded and configured"
else
    print_status "Cross-section data already present"
fi

# Step 4: Set environment variables
print_status "Setting up environment variables..."
CROSS_SECTIONS_PATH="$(pwd)/openmc-data/cross_sections.xml"

# Create .envrc for direnv (optional)
cat > .envrc << EOF
# Auto-generated by setup.sh
export OPENMC_CROSS_SECTIONS="$CROSS_SECTIONS_PATH"
EOF

# Create activation script
cat > activate.sh << EOF
#!/bin/bash
# Source this file to activate the nuclear-sandbox environment
export OPENMC_CROSS_SECTIONS="$CROSS_SECTIONS_PATH"
eval "\$($(pwd)/bin/micromamba shell hook -s bash)"
micromamba activate nuclear-sandbox
echo "Nuclear sandbox environment activated"
echo "OPENMC_CROSS_SECTIONS set to: \$OPENMC_CROSS_SECTIONS"
EOF
chmod +x activate.sh

print_status "Environment variables configured"

# Step 5: Run tests to verify installation
print_status "Running verification tests..."
export OPENMC_CROSS_SECTIONS="$CROSS_SECTIONS_PATH"
if bin/micromamba run -n nuclear-sandbox python -m unittest test_openmc_hybrid.TestCrossSectionData -q; then
    print_status "Cross-section data verified"
else
    print_warning "Some tests failed - check the output above"
fi

# Step 6: Print instructions
echo
echo "=== Setup Complete ==="
echo
echo "To activate the environment, run one of:"
echo "  source activate.sh"
echo "  OR"
echo "  eval \"\$(./bin/micromamba shell hook -s bash)\""
echo "  micromamba activate nuclear-sandbox"
echo
echo "To run the app:"
echo "  bin/micromamba run -n nuclear-sandbox streamlit run app.py"
echo
echo "To run tests:"
echo "  bin/micromamba run -n nuclear-sandbox python -m unittest discover"
echo
print_status "Setup complete!"
